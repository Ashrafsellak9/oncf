#!/usr/bin/env python3
"""
Test script pour v√©rifier que les erreurs JavaScript de la page des statistiques ont √©t√© corrig√©es
"""

import requests
from bs4 import BeautifulSoup
import json
import sys

def test_statistics_page():
    """Test de la page des statistiques apr√®s les corrections JavaScript"""
    
    print("üîß Test de la page des statistiques apr√®s corrections JavaScript")
    print("=" * 60)
    
    # Session pour maintenir l'authentification
    session = requests.Session()
    
    try:
        # 1. Connexion avec CSRF token
        print("\n1Ô∏è‚É£ Connexion...")
        
        # D'abord, r√©cup√©rer le CSRF token
        login_page = session.get('http://localhost:5000/login')
        soup = BeautifulSoup(login_page.text, 'html.parser')
        csrf_token = soup.find('input', {'name': 'csrf_token'})
        
        if not csrf_token:
            print("‚ùå CSRF token non trouv√©")
            return False
        
        csrf_value = csrf_token.get('value')
        
        login_data = {
            'username': 'admin',
            'password': 'admin123',
            'csrf_token': csrf_value
        }
        
        login_response = session.post('http://localhost:5000/login', data=login_data)
        if login_response.status_code != 200:
            print("‚ùå √âchec de la connexion")
            return False
        
        print("‚úÖ Connexion r√©ussie")
        
        # 2. Acc√®s √† la page des statistiques
        print("\n2Ô∏è‚É£ Acc√®s √† la page des statistiques...")
        stats_response = session.get('http://localhost:5000/statistiques')
        
        if stats_response.status_code != 200:
            print(f"‚ùå Erreur HTTP: {stats_response.status_code}")
            return False
        
        print("‚úÖ Page des statistiques accessible")
        
        # 3. V√©rification du contenu HTML
        print("\n3Ô∏è‚É£ V√©rification du contenu HTML...")
        soup = BeautifulSoup(stats_response.text, 'html.parser')
        
        # V√©rifier la pr√©sence des scripts
        scripts = soup.find_all('script')
        script_srcs = [script.get('src', '') for script in scripts if script.get('src')]
        
        print(f"üìú Scripts trouv√©s: {len(scripts)}")
        for src in script_srcs:
            print(f"   - {src}")
        
        # V√©rifier la pr√©sence de statistiques.js dans les scripts externes
        if any('statistiques.js' in src for src in script_srcs):
            print("‚úÖ Script statistiques.js trouv√©")
        else:
            # V√©rifier dans le contenu HTML pour les scripts inline
            html_content = stats_response.text
            if 'statistiques.js' in html_content:
                print("‚úÖ Script statistiques.js trouv√© (r√©f√©renc√© dans le HTML)")
            else:
                print("‚ùå Script statistiques.js manquant")
                return False
        
        # V√©rifier la pr√©sence de Chart.js
        if any('chart.js' in src.lower() for src in script_srcs):
            print("‚úÖ Chart.js trouv√©")
        else:
            # V√©rifier dans le contenu HTML
            if 'chart.js' in stats_response.text.lower():
                print("‚úÖ Chart.js trouv√© (r√©f√©renc√© dans le HTML)")
            else:
                print("‚ùå Chart.js manquant")
                return False
        
        # 4. V√©rification des √©l√©ments de la page
        print("\n4Ô∏è‚É£ V√©rification des √©l√©ments de la page...")
        
        # √âl√©ments principaux
        elements_to_check = [
            'totalGares',
            'totalArcs', 
            'totalAxes',
            'totalVilles'
        ]
        
        for element_id in elements_to_check:
            element = soup.find(id=element_id)
            if element:
                print(f"‚úÖ √âl√©ment {element_id} trouv√©")
            else:
                print(f"‚ùå √âl√©ment {element_id} manquant")
        
        # Canvas des graphiques
        canvas_elements = [
            'garesTypeChart',
            'axesChart',
            'timelineChart',
            'etatChart'
        ]
        
        for canvas_id in canvas_elements:
            canvas = soup.find(id=canvas_id)
            if canvas:
                print(f"‚úÖ Canvas {canvas_id} trouv√©")
            else:
                print(f"‚ùå Canvas {canvas_id} manquant")
        
        # 5. Test de l'API des statistiques
        print("\n5Ô∏è‚É£ Test de l'API des statistiques...")
        api_response = session.get('http://localhost:5000/api/statistiques')
        
        if api_response.status_code != 200:
            print(f"‚ùå Erreur API: {api_response.status_code}")
            return False
        
        try:
            api_data = api_response.json()
            print("‚úÖ API des statistiques accessible")
            
            if api_data.get('success'):
                print("‚úÖ Donn√©es des statistiques valides")
                
                # Afficher quelques exemples de donn√©es
                data = api_data.get('data', {})
                print(f"   - Total gares: {data.get('gares', {}).get('total', 'N/A')}")
                print(f"   - Total arcs: {data.get('arcs', {}).get('total', 'N/A')}")
                print(f"   - Types de gares: {len(data.get('gares', {}).get('par_type', []))}")
                print(f"   - Axes: {len(data.get('arcs', {}).get('par_axe', []))}")
                
            else:
                print(f"‚ùå Erreur dans les donn√©es: {api_data.get('error', 'Erreur inconnue')}")
                return False
                
        except json.JSONDecodeError:
            print("‚ùå R√©ponse API non-JSON")
            return False
        
        # 6. V√©rification des am√©liorations UI
        print("\n6Ô∏è‚É£ V√©rification des am√©liorations UI...")
        
        # V√©rifier la pr√©sence de classes Bootstrap modernes
        cards = soup.find_all(class_='card')
        print(f"‚úÖ {len(cards)} cartes trouv√©es")
        
        shadows = soup.find_all(class_='shadow-sm')
        print(f"‚úÖ {len(shadows)} √©l√©ments avec ombre trouv√©s")
        
        gradients = soup.find_all(class_='bg-gradient')
        print(f"‚úÖ {len(gradients)} √©l√©ments avec gradient trouv√©s")
        
        # V√©rifier les ic√¥nes Font Awesome
        icons = soup.find_all(class_='fas')
        print(f"‚úÖ {len(icons)} ic√¥nes Font Awesome trouv√©es")
        
        print("\nüéâ Test termin√© avec succ√®s!")
        print("\nüìã R√©sum√© des corrections apport√©es:")
        print("   ‚úÖ main.js modifi√© pour √©viter les conflits sur la page statistiques")
        print("   ‚úÖ statistiques.js am√©lior√© avec gestion d'erreurs robuste")
        print("   ‚úÖ Chart.js initialisation s√©curis√©e avec destruction des instances")
        print("   ‚úÖ UI/UX modernis√©e avec Bootstrap 5 et ic√¥nes")
        print("   ‚úÖ Gestion des erreurs et logging am√©lior√©")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que l'application Flask est d√©marr√©e.")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

if __name__ == "__main__":
    success = test_statistics_page()
    sys.exit(0 if success else 1)
