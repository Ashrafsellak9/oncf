#!/usr/bin/env python3
"""
Test d√©taill√© de la connexion pour comprendre le probl√®me d'authentification
"""

import requests
from bs4 import BeautifulSoup

def test_login_detailed():
    """Test d√©taill√© de la connexion"""
    
    print("üîê Test d√©taill√© de la connexion")
    print("=" * 40)
    
    session = requests.Session()
    
    try:
        # 1. Acc√©der √† la page de connexion
        print("\n1Ô∏è‚É£ Acc√®s √† la page de connexion...")
        login_page = session.get('http://localhost:5000/login')
        print(f"Status: {login_page.status_code}")
        
        # 2. Extraire le CSRF token
        soup = BeautifulSoup(login_page.text, 'html.parser')
        csrf_token = soup.find('input', {'name': 'csrf_token'})
        
        if csrf_token:
            csrf_value = csrf_token.get('value')
            print(f"CSRF token trouv√©: {csrf_value[:20]}...")
        else:
            print("‚ùå CSRF token non trouv√©")
            return False
        
        # 3. Tentative de connexion avec CSRF token
        print("\n2Ô∏è‚É£ Tentative de connexion...")
        login_data = {
            'username': 'admin',
            'password': 'admin123',
            'csrf_token': csrf_value
        }
        
        login_response = session.post('http://localhost:5000/login', data=login_data, allow_redirects=False)
        print(f"Status de connexion: {login_response.status_code}")
        print(f"Headers de r√©ponse: {dict(login_response.headers)}")
        
        # 4. V√©rifier les cookies
        print(f"\n3Ô∏è‚É£ Cookies apr√®s connexion:")
        for cookie in session.cookies:
            print(f"  {cookie.name}: {cookie.value[:50]}...")
        
        # 5. Tester l'acc√®s √† une page prot√©g√©e
        print("\n4Ô∏è‚É£ Test d'acc√®s √† une page prot√©g√©e...")
        dashboard_response = session.get('http://localhost:5000/dashboard', allow_redirects=False)
        print(f"Status dashboard: {dashboard_response.status_code}")
        
        if dashboard_response.status_code == 302:
            print(f"Redirection vers: {dashboard_response.headers.get('Location', 'Inconnu')}")
        
        # 6. Tester l'acc√®s aux statistiques
        print("\n5Ô∏è‚É£ Test d'acc√®s aux statistiques...")
        stats_response = session.get('http://localhost:5000/statistiques', allow_redirects=False)
        print(f"Status statistiques: {stats_response.status_code}")
        
        if stats_response.status_code == 302:
            print(f"Redirection vers: {stats_response.headers.get('Location', 'Inconnu')}")
        elif stats_response.status_code == 200:
            # V√©rifier le contenu
            soup = BeautifulSoup(stats_response.text, 'html.parser')
            title = soup.find('title')
            print(f"Titre de la page: {title.text if title else 'Non trouv√©'}")
            
            if 'statistiques.js' in stats_response.text:
                print("‚úÖ statistiques.js trouv√© dans la page")
            else:
                print("‚ùå statistiques.js non trouv√© dans la page")
        
        # 7. V√©rifier la session
        print("\n6Ô∏è‚É£ V√©rification de la session...")
        session_response = session.get('http://localhost:5000/api/profile')
        print(f"Status API profile: {session_response.status_code}")
        
        if session_response.status_code == 200:
            try:
                data = session_response.json()
                if data.get('success'):
                    print("‚úÖ Session valide - utilisateur connect√©")
                    print(f"  Utilisateur: {data['data']['username']}")
                else:
                    print("‚ùå Session invalide")
            except:
                print("‚ùå R√©ponse API invalide")
        else:
            print("‚ùå Impossible d'acc√©der √† l'API profile")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_login_detailed()
